import streamlit as st
import pandas as pd
from datetime import time, datetime, timedelta
from streamlit_calendar import calendar

# --- IMPORT CORE MODULE ---
from core.models import Task, Schedule, BlockedTimeSlot, ScheduledTask
from core.algorithm import run_genetic_algorithm
from core import configs

st.set_page_config(layout="wide")

st.title("Tr·ª£ l√Ω X·∫øp l·ªãch Th√¥ng minh üß†")
st.write("·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng Thu·∫≠t to√°n Di truy·ªÅn ƒë·ªÉ t·ª± ƒë·ªông t√¨m ki·∫øm l·ªãch tr√¨nh t·ªëi ∆∞u cho b·∫°n.")

# --- C·∫•u h√¨nh tr√™n Sidebar ---
st.sidebar.header("‚öôÔ∏è C·∫•u h√¨nh Thu·∫≠t to√°n")
# (C√°c slider c·∫•u h√¨nh c·ªßa b·∫°n ·ªü ƒë√¢y - kh√¥ng thay ƒë·ªïi)
population_size = st.sidebar.slider(
    "K√≠ch th∆∞·ªõc Qu·∫ßn th·ªÉ (Population Size)", 
    min_value=50, 
    max_value=500, 
    value=configs.POPULATION_SIZE, 
    step=10
)
generations = st.sidebar.slider(
    "S·ªë Th·∫ø h·ªá (Generations)", 
    min_value=50, 
    max_value=1000, 
    value=configs.GENERATIONS, 
    step=20
)

k_crossover = st.sidebar.slider(
    "H·ªá s·ªë Lai gh√©p (K Crossover)", 
    min_value=0.1, 
    max_value=1.0, 
    value=configs.ADAPTIVE_K_CROSSOVER, 
    step=0.05,
    help="H·ªá s·ªë k cho t·ª∑ l·ªá lai gh√©p th√≠ch ·ª©ng."
)

k_mutation = st.sidebar.slider(
    "H·ªá s·ªë ƒê·ªôt bi·∫øn (K Mutation)", 
    min_value=0.1, 
    max_value=1.0, 
    value=configs.ADAPTIVE_K_MUTATION, 
    step=0.05,
    help="H·ªá s·ªë k cho t·ª∑ l·ªá ƒë·ªôt bi·∫øn th√≠ch ·ª©ng."
)

# --- Kh·ªüi t·∫°o Session State ---
# C·∫ßn kh·ªüi t·∫°o c√°c key tr∆∞·ªõc ƒë·ªÉ tr√°nh l·ªói
if 'tasks' not in st.session_state:
    st.session_state.tasks = []
if 'best_schedule' not in st.session_state:
    st.session_state.best_schedule = None

# --- Khu v·ª±c qu·∫£n l√Ω c√¥ng vi·ªác ---
st.header("üìù Danh s√°ch C√¥ng vi·ªác")
with st.form("new_task_form", clear_on_submit=True):
    # (Code form th√™m task c·ªßa b·∫°n ·ªü ƒë√¢y - kh√¥ng thay ƒë·ªïi)
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        task_name = st.text_input("T√™n c√¥ng vi·ªác")
    with col2:
        duration = st.number_input("Th·ªùi l∆∞·ª£ng (30 ph√∫t/slot)", min_value=1, value=2)
    with col3:
        priority = st.selectbox("ƒê·ªô ∆∞u ti√™n", range(1, configs.TOTAL_PRIORITY_LEVELS + 1), help="1 l√† ∆∞u ti√™n cao nh·∫•t")
    with col4:
        is_work_time = st.checkbox("Trong gi·ªù l√†m vi·ªác?")
    
    submitted = st.form_submit_button("Th√™m c√¥ng vi·ªác")
    if submitted and task_name:
        st.session_state.tasks.append({
            "name": task_name,
            "duration": duration,
            "priority": priority,
            "is_work_time": is_work_time
        })
        # Reset l·∫°i l·ªãch tr√¨nh c≈© khi c√≥ task m·ªõi ƒë∆∞·ª£c th√™m
        st.session_state.best_schedule = None

# Hi·ªÉn th·ªã danh s√°ch c√¥ng vi·ªác hi·ªán t·∫°i
# DF version
# if st.session_state.tasks:
#     st.dataframe(pd.DataFrame(st.session_state.tasks), use_container_width=True)

# Hi·ªÉn th·ªã danh s√°ch c√¥ng vi·ªác hi·ªán t·∫°i d∆∞·ªõi d·∫°ng b·∫£ng c√≥ th·ªÉ ch·ªânh s·ª≠a
if st.session_state.tasks:
    st.write("### Danh s√°ch c√¥ng vi·ªác hi·ªán t·∫°i")
    # Chuy·ªÉn ƒë·ªïi list of dicts th√†nh DataFrame
    df_tasks = pd.DataFrame(st.session_state.tasks)
    
    # Th√™m m·ªôt c·ªôt 'delete' v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† False
    df_tasks['delete'] = False
    
    # S·ª≠ d·ª•ng st.data_editor ƒë·ªÉ t·∫°o b·∫£ng c√≥ th·ªÉ t∆∞∆°ng t√°c
    edited_df = st.data_editor(
        df_tasks,
        column_config={
            "name": st.column_config.TextColumn("T√™n c√¥ng vi·ªác"),
            "duration": st.column_config.NumberColumn("Th·ªùi l∆∞·ª£ng (slots)"),
            "priority": st.column_config.SelectboxColumn("ƒê·ªô ∆∞u ti√™n", options=range(1, configs.TOTAL_PRIORITY_LEVELS + 1)),
            "is_work_time": st.column_config.CheckboxColumn("Trong gi·ªù?"),
            "delete": st.column_config.CheckboxColumn("X√≥a?") # C·ªôt ƒë·ªÉ ch·ªçn x√≥a
        },
        use_container_width=True,
        hide_index=True,
    )

    # N√∫t ƒë·ªÉ x√°c nh·∫≠n vi·ªác x√≥a
    if st.button("C·∫≠p nh·∫≠t danh s√°ch c√¥ng vi·ªác"):
        # L·ªçc ra nh·ªØng h√†ng kh√¥ng ƒë∆∞·ª£c ƒë√°nh d·∫•u x√≥a
        remaining_tasks_df = edited_df[edited_df["delete"] == False]
        # Chuy·ªÉn DataFrame tr·ªü l·∫°i th√†nh list of dicts v√† c·∫≠p nh·∫≠t session_state
        st.session_state.tasks = remaining_tasks_df.drop(columns=['delete']).to_dict('records')
        # Reset l·∫°i l·ªãch tr√¨nh c≈© v√¨ danh s√°ch task ƒë√£ thay ƒë·ªïi
        st.session_state.best_schedule = None
        st.rerun() # Ch·∫°y l·∫°i app ƒë·ªÉ c·∫≠p nh·∫≠t b·∫£ng

# --- N√∫t ch·∫°y thu·∫≠t to√°n & Logic x·ª≠ l√Ω ---
if st.button("T·∫°o L·ªãch tr√¨nh T·ªëi ∆∞u üöÄ", type="primary"):
    if not st.session_state.tasks:
        st.warning("Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt c√¥ng vi·ªác ƒë·ªÉ x·∫øp l·ªãch.")
    else:
        tasks_to_schedule = [Task(**task_data) for task_data in st.session_state.tasks]
        with st.spinner("Thu·∫≠t to√°n ƒëang l√†m vi·ªác... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t m·ªôt l√∫c... ‚è≥"):
            # CH·∫†Y THU·∫¨T TO√ÅN TH·∫¨T
            # Ghi ƒë√® k·∫øt qu·∫£ v√†o session_state
            st.session_state.best_schedule = run_genetic_algorithm(
                tasks_to_schedule=tasks_to_schedule,
                population_size=population_size,
                generations=generations,
                blocked_slots=configs.blocked_slots
            )
        st.success("ƒê√£ t√¨m th·∫•y l·ªãch tr√¨nh t·ªëi ∆∞u!")

# --- Hi·ªÉn th·ªã k·∫øt qu·∫£ (LU√îN KI·ªÇM TRA T·ª™ SESSION STATE) ---
if st.session_state.best_schedule:
    st.header("üóìÔ∏è K·∫øt qu·∫£ L·ªãch tr√¨nh")
    
    calendar_events = []
    today = datetime.now()
    start_of_week = today - timedelta(days=today.weekday())

    for stask in st.session_state.best_schedule.scheduled_tasks:
        day_index = configs.DAYS_OF_WEEK.index(stask.day)
        task_date = start_of_week + timedelta(days=day_index)
        
        start_time = task_date.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(minutes=stask.start_slot * 30)
        end_time = start_time + timedelta(minutes=stask.task.duration * 30)

        calendar_events.append({
            "title": stask.task.name,
            "start": start_time.isoformat(),
            "end": end_time.isoformat(),
            "color": "#FF6B6B" if stask.task.priority == 1 else "#4ECDC4",
        })

    # T√πy ch·ªçn ƒë·ªÉ hi·ªÉn th·ªã l·ªãch theo ƒë·ªãnh d·∫°ng 24 gi·ªù
    calendar_options = {
        "headerToolbar": {
            "left": "prev,next today",
            "center": "title",
            "right": "dayGridMonth,timeGridWeek,timeGridDay",
        },
        "slotMinTime": "00:00:00",
        "slotMaxTime": "24:00:00",
        "initialView": "timeGridWeek", # Ch·∫ø ƒë·ªô xem m·∫∑c ƒë·ªãnh l√† tu·∫ßn
        "allDaySlot": False, # ·∫®n d√≤ng "all-day"
        "eventTimeFormat": { # ƒê·ªãnh d·∫°ng th·ªùi gian hi·ªÉn th·ªã tr√™n s·ª± ki·ªán
            "hour": "2-digit",
            "minute": "2-digit",
            "hour12": False
        }
    }
        
    calendar(events=calendar_events, options=calendar_options)