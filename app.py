import streamlit as st
from datetime import time
import pandas as pd
from streamlit_calendar import calendar
from datetime import datetime, timedelta

# --- IMPORT CORE MODULE ---
from core.models import Task, Schedule, BlockedTimeSlot
from core.algorithm import run_genetic_algorithm
from core import configs


st.set_page_config(layout="wide") # S·ª≠ d·ª•ng to√†n b·ªô chi·ªÅu r·ªông trang

st.title("Tr·ª£ l√Ω X·∫øp l·ªãch Th√¥ng minh üß†")
st.write("·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng Thu·∫≠t to√°n Di truy·ªÅn ƒë·ªÉ t·ª± ƒë·ªông t√¨m ki·∫øm l·ªãch tr√¨nh t·ªëi ∆∞u cho b·∫°n.")

# --- C·∫•u h√¨nh tr√™n Sidebar ---
st.sidebar.header("‚öôÔ∏è C·∫•u h√¨nh Thu·∫≠t to√°n")

population_size = st.sidebar.slider(
    "K√≠ch th∆∞·ªõc Qu·∫ßn th·ªÉ (Population Size)", 
    min_value=50, 
    max_value=500, 
    value=configs.POPULATION_SIZE, 
    step=10,
    help="S·ªë l∆∞·ª£ng l·ªãch tr√¨nh ƒë∆∞·ª£c t·∫°o ra trong m·ªói th·∫ø h·ªá. C√†ng l·ªõn c√†ng c√≥ kh·∫£ nƒÉng t√¨m ra gi·∫£i ph√°p t·ªët h∆°n, nh∆∞ng ch·∫°y l√¢u h∆°n."
)

generations = st.sidebar.slider(
    "S·ªë Th·∫ø h·ªá (Generations)", 
    min_value=50, 
    max_value=1000, 
    value=configs.GENERATIONS, 
    step=20,
    help="S·ªë v√≤ng l·∫∑p 'ti·∫øn h√≥a'. C√†ng nhi·ªÅu th·∫ø h·ªá, k·∫øt qu·∫£ c√†ng c√≥ th·ªÉ t·ªët h∆°n."
)

k_crossover = st.sidebar.slider(
    "H·ªá s·ªë Lai gh√©p (K Crossover)", 
    min_value=0.1, 
    max_value=1.0, 
    value=configs.ADAPTIVE_K_CROSSOVER, 
    step=0.05,
    help="H·ªá s·ªë k cho t·ª∑ l·ªá lai gh√©p th√≠ch ·ª©ng."
)

k_mutation = st.sidebar.slider(
    "H·ªá s·ªë ƒê·ªôt bi·∫øn (K Mutation)", 
    min_value=0.1, 
    max_value=1.0, 
    value=configs.ADAPTIVE_K_MUTATION, 
    step=0.05,
    help="H·ªá s·ªë k cho t·ª∑ l·ªá ƒë·ªôt bi·∫øn th√≠ch ·ª©ng."
)


# --- Khu v·ª±c qu·∫£n l√Ω c√¥ng vi·ªác ---
st.header("üìù Danh s√°ch C√¥ng vi·ªác")

# Kh·ªüi t·∫°o danh s√°ch tasks trong session state n·∫øu ch∆∞a c√≥
if 'tasks' not in st.session_state:
    st.session_state.tasks = []

# Form ƒë·ªÉ th√™m c√¥ng vi·ªác m·ªõi
with st.form("new_task_form", clear_on_submit=True):
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        task_name = st.text_input("T√™n c√¥ng vi·ªác")
    with col2:
        duration = st.number_input("Th·ªùi l∆∞·ª£ng (30 ph√∫t/slot)", min_value=1, value=2)
    with col3:
        priority = st.selectbox("ƒê·ªô ∆∞u ti√™n", options=[1, 2, 3, 4], help="1 l√† ∆∞u ti√™n cao nh·∫•t")
    with col4:
        is_work_time = st.checkbox("Trong gi·ªù l√†m vi·ªác?")
    
    submitted = st.form_submit_button("Th√™m c√¥ng vi·ªác")
    if submitted and task_name:
        st.session_state.tasks.append({
            "name": task_name,
            "duration": duration,
            "priority": priority,
            "is_work_time": is_work_time
        })

# Hi·ªÉn th·ªã danh s√°ch c√¥ng vi·ªác hi·ªán t·∫°i d∆∞·ªõi d·∫°ng b·∫£ng
if st.session_state.tasks:
    df_tasks = pd.DataFrame(st.session_state.tasks)
    st.dataframe(df_tasks, use_container_width=True)

# N√∫t ƒë·ªÉ ch·∫°y thu·∫≠t to√°n
if st.button("T·∫°o L·ªãch tr√¨nh T·ªëi ∆∞u üöÄ", type="primary"):
    if not st.session_state.tasks:
        st.warning("Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt c√¥ng vi·ªác ƒë·ªÉ x·∫øp l·ªãch.")
    else:
        # Chuy·ªÉn ƒë·ªïi tasks t·ª´ session state th√†nh ƒë·ªëi t∆∞·ª£ng Task
        tasks_to_schedule = [Task(**task_data) for task_data in st.session_state.tasks]

        # (B·∫°n c·∫ßn import Task v√† c√°c class kh√°c t·ª´ core.models)
        # (B·∫°n c·∫ßn import run_genetic_algorithm t·ª´ core.algorithm)

        with st.spinner("Thu·∫≠t to√°n ƒëang l√†m vi·ªác... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t m·ªôt l√∫c... ‚è≥"):
            # G·ªçi thu·∫≠t to√°n c·ªßa b·∫°n
            # best_schedule = run_genetic_algorithm(...)

            # --- GI·∫¢ L·∫¨P K·∫æT QU·∫¢ ƒê·ªÇ TEST GIAO DI·ªÜN ---
            # (Sau khi c√≥ k·∫øt qu·∫£ th·∫≠t, b·∫°n s·∫Ω thay th·∫ø ph·∫ßn n√†y)
            from core.models import ScheduledTask, Task, Schedule
            mock_task_1 = ScheduledTask(task=Task(name="H·ªçp team", duration=2, priority=1), day="Monday", start_slot=18) # 9:00 AM
            mock_task_2 = ScheduledTask(task=Task(name="L√†m vi·ªác", duration=4, priority=1), day="Tuesday", start_slot=20) # 10:00 AM
            best_schedule = Schedule(scheduled_tasks=[mock_task_1, mock_task_2])
            # --- K·∫æT TH√öC GI·∫¢ L·∫¨P ---

        st.success("ƒê√£ t√¨m th·∫•y l·ªãch tr√¨nh t·ªëi ∆∞u!")

        # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ th√†nh ƒë·ªãnh d·∫°ng m√† calendar component y√™u c·∫ßu
        calendar_events = []
        today = datetime.now()
        # T√¨m ng√†y th·ª© Hai c·ªßa tu·∫ßn hi·ªán t·∫°i ƒë·ªÉ l√†m m·ªëc
        start_of_week = today - timedelta(days=today.weekday()) 

        for stask in best_schedule.scheduled_tasks:
            day_index = configs.DAYS_OF_WEEK.index(stask.day)
            task_date = start_of_week + timedelta(days=day_index)

            start_time = task_date.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(minutes=stask.start_slot * 30)
            end_time = start_time + timedelta(minutes=stask.task.duration * 30)

            calendar_events.append({
                "title": stask.task.name,
                "start": start_time.isoformat(),
                "end": end_time.isoformat(),
                "color": "#FF6B6B" if stask.task.priority == 1 else "#4ECDC4", # M√†u s·∫Øc theo ƒë·ªô ∆∞u ti√™n
            })

        # Hi·ªÉn th·ªã l·ªãch
        st.header("üóìÔ∏è K·∫øt qu·∫£ L·ªãch tr√¨nh")
        calendar(events=calendar_events)