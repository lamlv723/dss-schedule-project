# app.py

import streamlit as st
import pandas as pd
from typing import List, Dict
import streamlit.components.v1 as components  # Import the components library
from core.models import Task, Schedule, ScheduledTask
import core.configs as configs
from core.algorithm import run_genetic_algorithm

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="Tr√¨nh X·∫øp L·ªãch Th√¥ng Minh",
    page_icon="üóìÔ∏è",
    layout="wide"
)

# --- Kh·ªüi t·∫°o Session State ---
if 'tasks' not in st.session_state:
    st.session_state.tasks = []
if 'schedule' not in st.session_state:
    st.session_state.schedule = None

# --- Giao di·ªán ch√≠nh ---
st.title("üóìÔ∏è Tr√¨nh X·∫øp L·ªãch Th√¥ng Minh")
st.markdown("""
·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng thu·∫≠t to√°n di truy·ªÅn ƒë·ªÉ t√¨m ra l·ªãch tr√¨nh t·ªëi ∆∞u cho c√°c c√¥ng vi·ªác c·ªßa b·∫°n.
H√£y th√™m c√°c c√¥ng vi·ªác ·ªü c·ªôt b√™n tr√°i, sau ƒë√≥ nh·∫•n n√∫t "T·∫°o L·ªãch Tr√¨nh".
""")

# --- B·ªë c·ª•c giao di·ªán ---
col1, col2 = st.columns([1, 2])

# --- C·ªôt 1: Nh·∫≠p li·ªáu v√† C·∫•u h√¨nh ---
with col1:
    st.header("1. Th√™m C√¥ng Vi·ªác")
    with st.form(key="add_task_form", clear_on_submit=True):
        name = st.text_input("T√™n c√¥ng vi·ªác", placeholder="V√≠ d·ª•: H·ªçp nh√≥m h√†ng tu·∫ßn")
        duration = st.number_input("Th·ªùi l∆∞·ª£ng (ph√∫t)", min_value=15, value=60, step=15)
        priority = st.slider("ƒê·ªô ∆∞u ti√™n (5 l√† cao nh·∫•t)", min_value=1, max_value=5, value=3)
        frequency = st.number_input(
            "T·∫ßn su·∫•t (s·ªë l·∫ßn/tu·∫ßn)", min_value=1, max_value=7, value=1, step=1,
            help="S·ªë l·∫ßn c√¥ng vi·ªác n√†y c·∫ßn ƒë∆∞·ª£c x·∫øp trong tu·∫ßn."
        )
        submitted = st.form_submit_button("Th√™m C√¥ng Vi·ªác")
        if submitted and name and duration:
            st.session_state.tasks.append(Task(name=name, duration=int(duration), priority=int(priority), frequency=int(frequency)))
            st.success(f"ƒê√£ th√™m: '{name}'")
    st.divider()
    with st.expander("Thi·∫øt l·∫≠p thu·∫≠t to√°n (N√¢ng cao)"):
        configs.POPULATION_SIZE = st.number_input("K√≠ch th∆∞·ªõc qu·∫ßn th·ªÉ", min_value=10, value=configs.POPULATION_SIZE)
        configs.MUTATION_RATE = st.slider("T·ª∑ l·ªá ƒë·ªôt bi·∫øn", 0.0, 1.0, value=configs.MUTATION_RATE)
        configs.NUM_GENERATIONS = st.number_input("S·ªë th·∫ø h·ªá", min_value=10, value=configs.NUM_GENERATIONS)
        configs.SLOT_DURATION_MINUTES = st.number_input("Th·ªùi l∆∞·ª£ng m·ªói slot (ph√∫t)", min_value=15, value=configs.SLOT_DURATION_MINUTES, step=15)
    st.divider()
    st.header("Danh s√°ch c√¥ng vi·ªác")
    if not st.session_state.tasks:
        st.info("Ch∆∞a c√≥ c√¥ng vi·ªác n√†o ƒë∆∞·ª£c th√™m.")
    else:
        for i, task in enumerate(st.session_state.tasks):
            task_cols = st.columns([8, 1])
            with task_cols[0]:
                with st.expander(f"**{task.name}** ({task.duration} ph√∫t, T·∫ßn su·∫•t: {task.frequency}x)"):
                    with st.form(key=f"edit_form_{i}"):
                        st.subheader(f"Ch·ªânh s·ª≠a: {task.name}")
                        edited_name = st.text_input("T√™n c√¥ng vi·ªác", value=task.name)
                        edited_duration = st.number_input("Th·ªùi l∆∞·ª£ng (ph√∫t)", min_value=15, value=task.duration, step=15)
                        edited_priority = st.slider("ƒê·ªô ∆∞u ti√™n", min_value=1, max_value=5, value=task.priority)
                        edited_frequency = st.number_input("T·∫ßn su·∫•t", min_value=1, max_value=7, value=task.frequency)
                        if st.form_submit_button("L∆∞u thay ƒë·ªïi"):
                            st.session_state.tasks[i] = Task(edited_name, int(edited_duration), int(edited_priority), int(edited_frequency))
                            st.rerun()
            with task_cols[1]:
                if st.button("üóëÔ∏è", key=f"delete_button_{i}", help="X√≥a c√¥ng vi·ªác n√†y"):
                    st.session_state.tasks.pop(i)
                    st.rerun()

# --- C·ªôt 2: T·∫°o v√† Hi·ªÉn th·ªã L·ªãch tr√¨nh ---
with col2:
    st.header("2. T·∫°o v√† Xem L·ªãch Tr√¨nh")
    if st.button("T·∫°o L·ªãch Tr√¨nh", type="primary", use_container_width=True):
        if st.session_state.tasks:
            with st.spinner("ƒêang ch·∫°y thu·∫≠t to√°n di truy·ªÅn..."):
                final_schedule, demo_log = run_genetic_algorithm(st.session_state.tasks)
                st.session_state.schedule = final_schedule
                
                # --- New Logic to Print to Browser Console ---
                # Build the JavaScript code string from the log messages
                js_log_messages = ""
                for message in demo_log:
                    # Escape backticks and wrap the message in backticks for JS template literals
                    js_message = message.replace("`", "\\`")
                    js_log_messages += f'console.log(`{js_message}`);\n'
                
                # Create the full script and execute it
                if js_log_messages:
                    components.html(f"<script>{js_log_messages}</script>", height=0)

                st.success("T·∫°o l·ªãch tr√¨nh th√†nh c√¥ng! (M·ªü console c·ªßa tr√¨nh duy·ªát ƒë·ªÉ xem chi ti·∫øt demo)")
        else:
            st.warning("Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt c√¥ng vi·ªác.")

    st.divider()

    # The calendar display logic remains the same
    if st.session_state.schedule and st.session_state.schedule.scheduled_tasks:
        st.subheader("L·ªãch tr√¨nh t·ªëi ∆∞u c·ªßa b·∫°n")
        tasks_by_day: Dict[int, List[ScheduledTask]] = {i: [] for i in range(7)}
        for stask in st.session_state.schedule.scheduled_tasks:
            tasks_by_day[stask.day].append(stask)
        for day in tasks_by_day:
            tasks_by_day[day].sort(key=lambda st: st.start_time)
        days_of_week = ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7", "Ch·ªß Nh·∫≠t"]
        cols = st.columns(7)
        for i, col in enumerate(cols):
            with col:
                st.markdown(f"**<p style='text-align: center;'>{days_of_week[i]}</p>**", unsafe_allow_html=True)
                st.markdown("---")
                if not tasks_by_day[i]:
                    st.info("Tr·ªëng")
                else:
                    for stask in tasks_by_day[i]:
                        start_mins = stask.start_time * configs.SLOT_DURATION_MINUTES
                        start_time_str = f"{start_mins // 60:02d}:{start_mins % 60:02d}"
                        st.info(f"**{stask.task.name}**\n\nüïí {start_time_str} ({stask.task.duration} ph√∫t)")
    elif st.session_state.schedule:
        st.info("Thu·∫≠t to√°n kh√¥ng x·∫øp ƒë∆∞·ª£c c√¥ng vi·ªác n√†o.")
    else:
        st.info("Nh·∫•n n√∫t 'T·∫°o L·ªãch Tr√¨nh' ƒë·ªÉ xem k·∫øt qu·∫£.")