# app.py

import streamlit as st
import pandas as pd
from core.models import Task, Schedule
import core.configs as configs
from core.algorithm import run_genetic_algorithm

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="Tr√¨nh X·∫øp L·ªãch Th√¥ng Minh",
    page_icon="üóìÔ∏è",
    layout="wide"
)

# --- Kh·ªüi t·∫°o Session State ---
if 'tasks' not in st.session_state:
    st.session_state.tasks = []

if 'schedule' not in st.session_state:
    st.session_state.schedule = None

# --- Giao di·ªán ch√≠nh ---
st.title("üóìÔ∏è Tr√¨nh X·∫øp L·ªãch Th√¥ng Minh")
st.markdown("""
·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng thu·∫≠t to√°n di truy·ªÅn ƒë·ªÉ t√¨m ra l·ªãch tr√¨nh t·ªëi ∆∞u cho c√°c c√¥ng vi·ªác c·ªßa b·∫°n.
H√£y th√™m c√°c c√¥ng vi·ªác ·ªü c·ªôt b√™n tr√°i, sau ƒë√≥ nh·∫•n n√∫t "T·∫°o L·ªãch Tr√¨nh".
""")

# --- B·ªë c·ª•c giao di·ªán ---
col1, col2 = st.columns([1, 2])

# --- C·ªôt 1: Nh·∫≠p li·ªáu v√† C·∫•u h√¨nh ---
with col1:
    st.header("1. Th√™m C√¥ng Vi·ªác")

    with st.form(key="add_task_form", clear_on_submit=True):
        name = st.text_input("T√™n c√¥ng vi·ªác", placeholder="V√≠ d·ª•: H·ªçp nh√≥m h√†ng tu·∫ßn")
        duration = st.number_input("Th·ªùi l∆∞·ª£ng (ph√∫t)", min_value=15, value=60, step=15)
        priority = st.slider("ƒê·ªô ∆∞u ti√™n (5 l√† cao nh·∫•t)", min_value=1, max_value=5, value=3)
        
        frequency = st.number_input(
            "T·∫ßn su·∫•t (s·ªë l·∫ßn/tu·∫ßn)", 
            min_value=1, 
            max_value=7, 
            value=1,
            step=1,
            help="S·ªë l·∫ßn c√¥ng vi·ªác n√†y c·∫ßn ƒë∆∞·ª£c x·∫øp trong tu·∫ßn."
        )

        submitted = st.form_submit_button("Th√™m C√¥ng Vi·ªác")

        if submitted:
            if name and duration:
                new_task = Task(
                    name=name,
                    duration=int(duration),
                    priority=int(priority),
                    frequency=int(frequency)
                )
                st.session_state.tasks.append(new_task)
                st.success(f"ƒê√£ th√™m c√¥ng vi·ªác: '{name}'")
            else:
                st.error("Vui l√≤ng nh·∫≠p t√™n v√† th·ªùi l∆∞·ª£ng c√¥ng vi·ªác.")

    st.divider()

    with st.expander("Thi·∫øt l·∫≠p thu·∫≠t to√°n (N√¢ng cao)"):
        configs.POPULATION_SIZE = st.number_input(
            "K√≠ch th∆∞·ªõc qu·∫ßn th·ªÉ", 
            min_value=10, 
            value=configs.POPULATION_SIZE
        )
        configs.MUTATION_RATE = st.slider(
            "T·ª∑ l·ªá ƒë·ªôt bi·∫øn",
            min_value=0.0,
            max_value=1.0,
            value=configs.MUTATION_RATE
        )
        configs.NUM_GENERATIONS = st.number_input(
            "S·ªë th·∫ø h·ªá",
            min_value=10,
            value=configs.NUM_GENERATIONS
        )
        
        # --- Restored Code Block ---
        # This input for SLOT_DURATION_MINUTES is now back.
        configs.SLOT_DURATION_MINUTES = st.number_input(
            "Th·ªùi l∆∞·ª£ng m·ªói slot (ph√∫t)",
            min_value=15,
            value=configs.SLOT_DURATION_MINUTES,
            step=15,
            help="Chia m·ªôt ng√†y th√†nh c√°c kho·∫£ng th·ªùi gian nh·ªè."
        )
        # --- End of Restored Code ---

    st.divider()

    st.header("Danh s√°ch c√¥ng vi·ªác")
    if not st.session_state.tasks:
        st.info("Ch∆∞a c√≥ c√¥ng vi·ªác n√†o ƒë∆∞·ª£c th√™m.")
    else:
        for i, task in enumerate(st.session_state.tasks):
            st.write(
                f"{i + 1}. **{task.name}** - "
                f"{task.duration} ph√∫t, "
                f"∆Øu ti√™n: {task.priority}, "
                f"T·∫ßn su·∫•t: {task.frequency} l·∫ßn"
            )

# --- C·ªôt 2: T·∫°o v√† Hi·ªÉn th·ªã L·ªãch tr√¨nh ---
with col2:
    st.header("2. T·∫°o v√† Xem L·ªãch Tr√¨nh")

    if st.button("T·∫°o L·ªãch Tr√¨nh", type="primary", use_container_width=True):
        if st.session_state.tasks:
            with st.spinner("ƒêang ch·∫°y thu·∫≠t to√°n di truy·ªÅn... Vi·ªác n√†y c√≥ th·ªÉ m·∫•t m·ªôt l√∫c."):
                final_schedule = run_genetic_algorithm(st.session_state.tasks)
                st.session_state.schedule = final_schedule
                st.success("T·∫°o l·ªãch tr√¨nh th√†nh c√¥ng!")
        else:
            st.warning("Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt c√¥ng vi·ªác ƒë·ªÉ t·∫°o l·ªãch tr√¨nh.")

    st.divider()

    if st.session_state.schedule and st.session_state.schedule.scheduled_tasks:
        st.subheader("L·ªãch tr√¨nh t·ªëi ∆∞u c·ªßa b·∫°n")
        
        schedule_data = []
        for scheduled_task in st.session_state.schedule.scheduled_tasks:
            start_mins = scheduled_task.start_time * configs.SLOT_DURATION_MINUTES
            end_mins = start_mins + scheduled_task.task.duration
            start_time_str = f"{start_mins // 60:02d}:{start_mins % 60:02d}"
            end_time_str = f"{end_mins // 60:02d}:{end_mins % 60:02d}"
            time_frame = f"{start_time_str} - {end_time_str}"

            schedule_data.append({
                "Khung gi·ªù": time_frame,
                "Ng√†y": ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7", "Ch·ªß Nh·∫≠t"][scheduled_task.day],
                "C√¥ng vi·ªác": scheduled_task.task.name,
            })
        
        df = pd.DataFrame(schedule_data)
        
        calendar_df = df.pivot_table(
            index="Khung gi·ªù", 
            columns="Ng√†y", 
            values="C√¥ng vi·ªác", 
            aggfunc='first',
        ).fillna('')
        
        days_order = ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7", "Ch·ªß Nh·∫≠t"]
        calendar_df = calendar_df.reindex(columns=days_order, fill_value='')
        calendar_df = calendar_df.sort_index()
        
        st.dataframe(calendar_df, use_container_width=True, height=800)

    elif st.session_state.schedule:
        st.info("Thu·∫≠t to√°n kh√¥ng x·∫øp ƒë∆∞·ª£c c√¥ng vi·ªác n√†o. H√£y th·ª≠ l·∫°i v·ªõi √≠t c√¥ng vi·ªác h∆°n ho·∫∑c gi·∫£m th·ªùi l∆∞·ª£ng c·ªßa ch√∫ng.")
    else:
        st.info("Nh·∫•n n√∫t 'T·∫°o L·ªãch Tr√¨nh' ƒë·ªÉ xem k·∫øt qu·∫£.")